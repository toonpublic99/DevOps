พื้นฐานคำสั่ง Linux Command
-------------------------------------------------
วันที่ 1
-------------------------------------------------
ล้างหน้าจอ เคลียร์สกรีน
$ clear

แสดงวันที่ของระบบ
$ date

แสดงปฎิทินของระบบ
$ cal

แสดงระบบ
$ uname -a

แสดงชื่อผู้ใช้ปัจจุบัน
$ whoami

แสดงรายการไฟล์ต่างๆ ใน directory ปัจจุบัน
$ ls

แสดงรายการไฟล์พร้อมรายละเอียดต่างๆ
$ ls –l

แสดงรายการไฟล์ทั้งหมด (รวม hidden ไฟล์ด้วย)
$ ls -a
$ ls -al

เปลี่ยนไปยัง directory ปลายทางที่ต้องการ
$ cd <directory>
$ cd /
$ cd home
$ ls
$ cd /var
$ cd ~
$ cd /home
$ cd ..

แสดง path ปัจจุบันที่ทำงานอยู่
$ pwd

สร้างโฟลเดอร์
$ mkdir <folder-name>
$ mkdir demo

สร้างไฟล์
$ touch <filename>
$ touch hello.txt

เปิดไฟล์ด้วย editor ชื่อ Vim
$ vi <filename>
$ vi hello.txt

บันทึกไฟล์ใน vi
$ กด esc
$ พิมพ์ :wq

จากนั้นลองอ่านไฟล์
$ cat hello.txt

คัดลอกไฟล์จากที่หนึ่งไปอีกที่หนึ่ง
$ cp <origin-file-path> <destination-path>
$ cp hello.txt /var
$ cd /var

ลบไฟล์หรือโฟลเดอร์ (-r)
$ rm <file-name>
$ rm hello.txt
$ cd /home
$ rm -r demo

เปลี่ยน permission ของไฟล์หรือโฟลเดอร์
$ chmod <777> <file-name>
$ chmod 777 hello.txt

-------------------------------------------------
วันที่ 2
-------------------------------------------------
พื้นฐานการใช้งานคำสั่ง docker
---
แสดง version ของ docker
$ docker version

แสดงสถานะของ docker
$ docker stats

รายการ Images ทั้งหมด
$ docker images
$ docker image ls

รายการ Container ที่ทำงานอยู่
$ docker ps

รายการ Container ทั้งหมด
$ docker ps -a

ดึงรายการ image จาก registry
$ docker pull <imagename:tag>
$ docker pull hello-world

สร้าง Container
$ docker create <imagename|id>
$ docker create hello-world
$ docker create feb5d9fea6a5

สร้างและรัน Container (create + start)
$ docker run <imagename|id>

Start/Stop Container
$ docker [start|stop] <container_id>
$ docker start 0e349660fcdb
$ docker start -a 0e349660fcdb

Stop All Docker Containers
$ docker kill $(docker ps -q)

ลองทดสอบแบบสร้างและรันด้วยคำสั่ง
$ docker run hello-world

ทดสอบ start container hello-world
$ docker start -a 262f591fb472

ลบรายการ Container (ที่ stop แล้ว)
$ docker rm <container_id> 
$ docker rm a7b72d0eb4c9

ลบรายการ Container (ที่ start อยู่)
$ docker rm -f <container_id> 

ลบรายการ Container ทั้งหมดที่ stop อยู่
$ docker container prune

ลบรายการ Container ทั้งหมดทั้งที่ stop และ start อยู่
$ docker rm $(docker ps -a -q)

Overriding Default Comamnd
$ docker run busybox echo 'Hello world in my docker'

$ docker run busybox ls

$ docker run busybox ping google.com

Filter container
$ docker ps -a -f status="exited"

เรียนรู้การส่งคำสั่งเข้าไปยัง Container ที่ทำงานอยู่
$ docker run nginx

เรียนรู้การส่งคำสั่งเข้าไปยัง Container ที่ทำงานอยู่
$ docker exec <container_id> ls
$ docker exec <container_id> echo 'Hello nginx'

การ Shell เข้าไปยังใน Container
$ docker exec -it <container_id> sh
$ docker exec -it <container_id> bash
cd /usr/share/nginx/html/
cat index.html

การทำ Port Mapping ให้กับ Container
$ docker run –p 8800:80 nginx

สั่งให้ Container ทำงานแบบ Detached (Background run)
$ docker run -d -p 9900:80 nginx

การตั้งชื่อให้กับ Container
$ docker run --name mynginx -d -p 7700:80 nginx

การแสดง Log ของ Container
$ docker logs <container_id>
$ docker logs 1d91ead06cc3

การแสดง Log with follow ของ Container
$ docker logs -f 1d91ead06cc3

การดูข้อมูลระบบของ Docker
$ docker info
$ docker system df
$ docker system events

การดูข้อมูล images
$ docker image inspect <image_name:tag>
$ docker image inspect nginx

การลบ images ออก
$ docker image rm <imagename:tag>
$ docker rmi <imagename:tag>

$ docker rmi rm hello-world
$ docker image rm hello-world

$ docker image rm -f <imagename:tag>
$ docker image rm -f busybox

เตรียมไฟล์ images ที่ต้องการใช้งาน
$ docker pull wordpress
$ docker pull wordpress:4.7.2-php5.6-fpm
$ docker pull mysql:5.7
$ docker pull phpmyadmin

การสร้าง Network ใน Docker
$ docker network ls
$ docker network create wordpress

การลบ Network ใน Docker
$ docker network rm f8cc7481c1f9

สร้าง Container “mysql” 
$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=wordpress_db -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=wordpress -d mysql:5.7

สร้าง Container "PHPMyAdmin"
$ docker run --name pma -e PMA_ARBITRARY=1 -p 8888:80 -d phpmyadmin

เชื่อม Container เข้ากับ Network ที่สร้างไว้
$ docker network connect wordpress mysql
$ docker network connect wordpress pma

ตรวจสอบ Network ของ Container
$ docker network inspect wordpress

สร้าง Containe "Wordpress windows"
$ docker run --name wordpress -p 7777:80 ^
--network wordpress ^
-e WORDPRESS_DB_HOST=mysql ^
-e WORDPRESS_DB_USER=wordpress ^
-e WORDPRESS_DB_PASSWORD=wordpress ^
-e WORDPRESS_DB_NAME=wordpress_db ^
-d wordpress

สร้าง Containe "Wordpress macOS"
$ docker run --name wordpress -p 7777:80 \
--network wordpress \
-e WORDPRESS_DB_HOST=mysql \
-e WORDPRESS_DB_USER=wordpress\
-e WORDPRESS_DB_PASSWORD=wordpress \
-e WORDPRESS_DB_NAME=wordpress_db \
-d wordpress

-------------------------------------------------
วันที่ 3
-------------------------------------------------
สร้าง Network ใหม่
$ docker network create wordpress02

สร้าง Container ใหม่พร้อม bind mount volume
$ docker run --name mysql03 ^
--network wordpress02 ^
-v E:\TrainingWorkshop\Docker-Basic\wordpress-mysql\mysql:/var/lib/mysql ^
-e MYSQL_ROOT_PASSWORD=1234 ^
-e MYSQL_DATABASE=wordpress_db ^
-e MYSQL_USER=wordpress ^
-e MYSQL_PASSWORD=wordpress -d mysql:5.7

สร้าง Container WordPress ใหม่พร้อม mount volume

$ docker run --name wordpress03 -p 9999:80 ^
--network wordpress02 ^
-v E:\TrainingWorkshop\Docker-Basic\wordpress-mysql\wordpress:/var/www/html ^
-e WORDPRESS_DB_HOST=mysql03  ^
-e WORDPRESS_DB_USER=wordpress ^
-e WORDPRESS_DB_PASSWORD=wordpress ^
-e WORDPRESS_DB_NAME=wordpress_db ^
-d wordpress

ทำการลบ container mysql02  และ wordpress02 ออกไป
----
$ docker rm -f mysql02 wordpress02


WORKSHOP MERN Stack
-----------------------------------------
Code for package.json
----
{
    "name": "nodejs",
    "version": "1.0.0",
    "main": "index.js",
    "scripts": {
        "start": "nodemon index.js"
    },
    "dependencies": {
        "express": "^4.17.1",
        "nodemon": "^2.0.13"
    }
}


Code for index.js
---
const express = require('express')
const app = express()
app.get('/', (req, res) => {
    res.send('Hello Node.JS in my Docker')
})
app.listen(3000, () => {
    console.log('Server listening on port 3000')
})


Create Dockerfile
---
# Base Image
FROM node:lts-alpine

# Working Directory (WORKDIR)
WORKDIR /usr/app

# Copy package.json (ส่วนนี้ไม่ค่อยมีการเปลี่ยนแปลงจะดึงจาก cache ในรอบถัดไป)
COPY ./package.json .

# Run Command
RUN npm install

# Copy code from host to container
COPY . .

# Default Command
CMD [ "npm", "start" ]

Build Image จาก Dockerfile
---
$ docker build -t mynodeapp:1.0 .

Create new container
---
$ docker run --name "nodejsapp" ^
-v /usr/app/node_modules ^
-v E:\TrainingWorkshop\Docker-Basic\MERNDocker\nodejs:/usr/app ^
-p 3001:3000 mynodeapp:1.0

MongoDB
-----------------------------------------------------------
Create Dockerfile
---
# Base Image
FROM mongo:4.4.9

# ENV
ENV MONGO_INITDB_ROOT_USERNAME admin
ENV MONGO_INITDB_ROOT_PASSWORD 1234
ENV MONGO_INITDB_DATABASE products

# Add file
ADD ./data/products.js /docker-entrypoint-initdb.d

Create data/product.js
---
db.createCollection("products");
db.products.insert({
      "id": 1,
      "productName": "iPhone 13 Pro Max",
      "price": "45000",
      "thumbnail": "/images/product/1.jpg"
});
db.products.insert({
      "id": 2,
      "productName": "iPad Mini 2021",
      "price": "25000",
      "thumbnail": "/images/product/2.jpg"
});
db.products.insert({
      "id": 3,
      "productName": "Apple Watch 2021",
      "price": "15800",
      "thumbnail": "/images/product/3.jpg"
});


Build Image จาก Dockerfile
---
$ docker build -t mymongodb:1.0 .

Create mongodb container
---
$ docker run -d --name="mymongodb" mymongodb:1.0

การตรวจสอบฐานข้อมูลใน MonogDB
---
$ docker exec -it 6324cd795be7 bash
root@6324cd795be7:/# mongo -u "admin" -p "1234" --authenticationDatabase "admin"


Node JS Connect MongoDB
-----------------------------------------------------------
Update package.json file
---
    "dependencies": {
        "express": "^4.17.1",
        "nodemon": "^2.0.13",
        "mongodb": "^4.1.3"
    }
}


Update index.js to connect mongodb
---
const express = require('express')

// MongoDB Config
const MongoClient = require("mongodb").MongoClient
const db_user = process.env.DATABASE_USER
const db_pass = process.env.DATABASE_PASSWORD
const db_host = process.env.DATABASE_HOST
const db_port = 27017

const url = `mongodb://${db_user}:${db_pass}@${db_host}:${db_port}`
console.log(url)

const app = express()

app.get("/", (req, resp) => {
	MongoClient.connect(
		url,
		(err, client) => {
			if (err) throw err;
			console.log("Database connected!");

			const db = client.db("products");
			db.collection("products")
				.find()
				.toArray((err, result) => {
					if (err) throw err;
					resp.send(result);
				});
		}
	)
})

app.listen(3000, () => {
    console.log('Server listening on port 3000')
})


Create Image node.js connect monogdb
---
$ docker build -t mynodeapp:2.0 .

Create networks
---
$ docker network create products

Connect container mymongodb to network products
---
$ docker network connect products mymongodb

Create container NodeJS with mongodb
---
$ docker run -d --name "mynodejsapp" ^
-e DATABASE_USER=admin ^
-e DATABASE_PASSWORD=1234 ^
-e DATABASE_HOST=mymongodb ^
--network products ^
-v /usr/app/node_modules ^
-v E:\TrainingWorkshop\Docker-Basic\MERNDocker\nodejs:/usr/app ^
-p 3002:3000 mynodeapp:2.0

Show logs
---
$ docker logs mynodejsapp

Create RestAPI
---------------------------------------------------------------
Update index.js
---
app.get("/api/products", (req, resp) => {
resp.status(200).send(result)
client.close()
}

Create React App
---
npx create-react-app frontend

Run React Project
---
$ cd frontend
$ npm start

Install Axios package
---
$ npm install axios

Read API with React in file App.js
---
import {useState, useEffect} from 'react'
import axios from 'axios'

const baseURL = "http://localhost:3002/api/products"

Update Allow Origin in NodeJS App
---
app.use(function(req, resp, next) {
	// Website 
	resp.setHeader("Access-Control-Allow-Origin", "*");
	// Request Method
	resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
	// Request Header
	resp.setHeader("Access-Control-Allow-Headers", "X-Requested-With, Content-type");
	next();
})

Read Products in React JS
----
<div>
      {
       products.map(element => {
          return (
            <div key={element.id} >
              <h2>{element.productName}</h2>
              <p>{element.price}</p>
              <p>{element.thumbnail}</p>
            </div>
          )
        })
      }
</div>

Create Dockerfile in frontend
---
# Base Image
FROM node:lts-alpine

# Working Directory (WORKDIR)
WORKDIR /usr/app

# Copy package.json (ส่วนนี้ไม่ค่อยมีการเปลี่ยนแปลงจะดึงจาก cache ในรอบถัดไป)
COPY ./package.json .

# Run Command
RUN npm install

# Copy code from host to container
COPY . .

# Default Command
CMD [ "npm", "start" ]

Delete node_modules
----

Build Images
---
$ docker build -t myreactapp:1.0 .

Create container
---
$ docker run -d --name "myreactapp" ^
--network products ^
-v /usr/app/node_modules ^
-v E:\TrainingWorkshop\Docker-Basic\MERNDocker\frontend:/usr/app ^
-p 3003:3000 myreactapp:1.0

Create Dockerfile for build production “Dockerfile.prod”
---
# Base Image
FROM node:alpine as builder

# Working Directory (WORKDIR)
WORKDIR /usr/app

# Copy package.json (ส่วนนี้ไม่ค่อยมีการเปลี่ยนแปลงจะดึงจาก cache ในรอบถัดไป)
COPY ./package.json .
RUN npm install
COPY . .
RUN npm run build
CMD ["npm", "start"]

# Base Image
FROM nginx
EXPOSE 80
COPY --from=builder /usr/app/build /usr/share/nginx/html

Build Images for production
---
$ docker build -f Dockerfile.prod -t myreactapp:2.0 .

Create Container “myreactapp-prod”
---
$ docker run -d --name "myreactapp-prod" ^
--network products ^
-v /usr/app/node_modules ^
-v E:\TrainingWorkshop\Docker\docker-basic\MERNDocker\frontend:/usr/app ^
-p 8880:80 myreactapp:2.0


Create docker-compose.yml for WordPress+MySQL+PHPMyAdmin
--------------------------------------------------------------------
Create file docker-compose.yml in wordpress_mysql project
---
version: "3.9"

services:
  db:
    image: mysql:5.7
    restart: always
    networks:
      - wlamp
    volumes:
      - ./mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=wordpress_db
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress
    restart: always
    networks:
      - wlamp
    volumes:
      - ./wordpress-data:/var/www/html
    ports:
      - 8800:80
    environment:
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress_db
  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin
    restart: always
    networks:
      - wlamp
    environment:
      - PMA_ARBITRARY=1
    ports:
      - 7770:80

networks:
  wlamp:

เช็คความถูกต้องของไฟล์ docker-compose.yml
---
$ docker-compose config
$ docker-compose config -q

การรัน docker-compose.yml เพื่อสร้าง images และ containers
---
$ docker-compose up -d

ลองเช็ค container
---
$ docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"

ลองเช็ค networks
---
$ docker network ls

ลองเช็ค bind mount volume
---

การดูข้อมูล container ที่ดูแลโดย docker-compose.yml
---
$ docker-compose ps

การสร้าง container แบบยังไม่ start
---
$ docker-compose up –no-start

การสั่ง start container
---
$ docker-compose start

การสั่ง stop container
---
$ docker-compose stop

การสั่งลบ containers และ networks
---
$ docker-compose down

การสั่งลบ containers และ networks และ images ที่ใช้ทั้งหมด
---
$ docker-compose down --rmi all

การลบ Volume ที่ไม่ต้องการออกไป (เฉพาะตัวที่ไม่ถูกใช้งาน)
---
$ docker volume prune


Create docker-compose.yml for WordPress+MySQL+PHPMyAdmin
-------------------------------------------------------------------
Create file docker-compose.yml in MERNDokcer project
----
version: "3.9"

services:
  mymongodb:
    build: mongodb/
    image: mymongodb:1.0
    restart: always
    networks:
      - mern
    volumes:
      - ./mongodb/mogodb-data:/data/db
  mynodeapp:
    depends_on:
      - mymongodb
    build: nodejs/
    image: mynodeapp:2.0
    restart: always
    networks:
      - mern
    volumes:
      - /usr/app/node_modules
      - ./nodejs:/usr/app
    ports:
      - 3333:3000
    environment:
      - DATABASE_USER=admin
      - DATABASE_PASSWORD=1234
      - DATABASE_HOST=mymongodb
  myreactapp:
    depends_on:
      - mymongodb
    build: frontend/Dockerfile.prod
    image: myreactapp:2.0
    restart: always
    networks:
      - mern
    volumes:
      - /usr/app/node_modules
      - ./frontend:/usr/app
    ports:
      - 8181:80

networks:
  mern: 

เช็คความถูกต้องของไฟล์ docker-compose.yml
---
$ docker-compose config -q

การรัน docker-compose.yml เพื่อสร้าง images และ containers
---
$ docker-compose up -d

ลองเช็ค container
---
$ docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"

ลองเช็ค networks
---
$ docker network ls

ทดสอบเรียกใช้งาน NodeJS API
---
http://localhost:3333/api/products

ทดสอบเรียกใช้งาน ReactJS Frontend
---
http://localhost:8181/

การบังคับให้ docker-compose re-build ใหม่
---
$ docker-compose up -d --build